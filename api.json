{
  "openapi": "3.0.0",
  "paths": {
    "/api/orgs/{subdomain}": {
      "get": {
        "operationId": "OrganizationController_getBySubdomain",
        "parameters": [
          {
            "name": "subdomain",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization found by subdomain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations"
        ]
      }
    },
    "/api/orgs": {
      "get": {
        "operationId": "OrganizationController_getById",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Organization found by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Organizations"
        ]
      },
      "post": {
        "operationId": "OrganizationController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrgDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Organizations"
        ]
      },
      "patch": {
        "operationId": "OrganizationController_update",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateOrgDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Organization updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Organizations"
        ]
      },
      "delete": {
        "operationId": "OrganizationController_remove",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Organization deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Organizations"
        ]
      }
    },
    "/api/users": {
      "post": {
        "operationId": "UserController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "get": {
        "operationId": "UserController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: asc or desc",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search keyword (applies to name, email, etc.)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Skip N items (overrides page/perPage if set)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items (overrides perPage if set)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "operationId": "UserController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "UserController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "UserController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Users"
        ]
      }
    },
    "/api/locations": {
      "post": {
        "operationId": "LocationController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Location created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Locations"
        ]
      },
      "get": {
        "operationId": "LocationController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: asc or desc",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search keyword (applies to name, email, etc.)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Skip N items (overrides page/perPage if set)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items (overrides perPage if set)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of locations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/api/locations/{id}": {
      "get": {
        "operationId": "LocationController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Locations"
        ]
      },
      "patch": {
        "operationId": "LocationController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Locations"
        ]
      },
      "delete": {
        "operationId": "LocationController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/api/products": {
      "post": {
        "operationId": "ProductController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      },
      "get": {
        "operationId": "ProductController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: asc or desc",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search keyword (applies to name, email, etc.)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Skip N items (overrides page/perPage if set)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items (overrides perPage if set)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/{id}": {
      "get": {
        "operationId": "ProductController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      },
      "patch": {
        "operationId": "ProductController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      },
      "delete": {
        "operationId": "ProductController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/search": {
      "post": {
        "operationId": "ProductController_search",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductSearchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product search results",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/{id}/variants": {
      "post": {
        "operationId": "ProductController_createVariant",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Parent product ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductVariantDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product variant created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      },
      "get": {
        "operationId": "ProductController_getVariants",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Parent product ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product variants retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/variants/{variantId}": {
      "patch": {
        "operationId": "ProductController_updateVariant",
        "parameters": [
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductVariantDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product variant updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      },
      "delete": {
        "operationId": "ProductController_deleteVariant",
        "parameters": [
          {
            "name": "variantId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product variant deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/{id}/locations/{locationId}/pricing": {
      "put": {
        "operationId": "ProductController_setLocationPricing",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductLocationPricingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location pricing set successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      },
      "patch": {
        "operationId": "ProductController_updateLocationPricing",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductLocationPricingDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Location pricing updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      },
      "delete": {
        "operationId": "ProductController_deleteLocationPricing",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "description": "Location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location pricing deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/{id}/locations/pricing": {
      "get": {
        "operationId": "ProductController_getLocationPricing",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Specific location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Location pricing retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/bulk/import": {
      "post": {
        "operationId": "ProductController_bulkImport",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkProductImportDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Products imported successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/bulk/update": {
      "patch": {
        "operationId": "ProductController_bulkUpdate",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkProductUpdateDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Products updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/bulk/delete": {
      "delete": {
        "operationId": "ProductController_bulkDelete",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkProductDeleteDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Products deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/products/{id}/analytics": {
      "get": {
        "operationId": "ProductController_getAnalytics",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Specific location ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Products"
        ]
      }
    },
    "/api/categories": {
      "post": {
        "operationId": "CategoryController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Category created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Categories"
        ]
      },
      "get": {
        "operationId": "CategoryController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: asc or desc",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search keyword (applies to name, email, etc.)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Skip N items (overrides page/perPage if set)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items (overrides perPage if set)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Categories"
        ]
      }
    },
    "/api/categories/hierarchy": {
      "get": {
        "operationId": "CategoryController_getHierarchy",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Category hierarchy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Categories"
        ]
      }
    },
    "/api/categories/{id}": {
      "get": {
        "operationId": "CategoryController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Categories"
        ]
      },
      "patch": {
        "operationId": "CategoryController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Category updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Categories"
        ]
      },
      "delete": {
        "operationId": "CategoryController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Categories"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "x-org-id",
            "in": "header",
            "description": "Organization ID for tenant resolution",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User logged in successfully"
          }
        },
        "summary": "",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/auth/whoami": {
      "get": {
        "operationId": "getCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get current user data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "summary": "",
        "tags": [
          "Auth"
        ]
      }
    },
    "/api/taxes": {
      "post": {
        "operationId": "TaxController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTaxDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tax created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Taxes"
        ]
      },
      "get": {
        "operationId": "TaxController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: asc or desc",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search keyword (applies to name, email, etc.)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Skip N items (overrides page/perPage if set)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items (overrides perPage if set)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of taxes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Taxes"
        ]
      }
    },
    "/api/taxes/{id}": {
      "get": {
        "operationId": "TaxController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tax found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Taxes"
        ]
      },
      "patch": {
        "operationId": "TaxController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTaxDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tax updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Taxes"
        ]
      },
      "delete": {
        "operationId": "TaxController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tax deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Taxes"
        ]
      }
    },
    "/api/discounts": {
      "post": {
        "operationId": "DiscountController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDiscountDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Discount created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Discounts"
        ]
      },
      "get": {
        "operationId": "DiscountController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: asc or desc",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search keyword (applies to name, email, etc.)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Skip N items (overrides page/perPage if set)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items (overrides perPage if set)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of discounts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/api/discounts/{id}": {
      "get": {
        "operationId": "DiscountController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Discount found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Discounts"
        ]
      },
      "patch": {
        "operationId": "DiscountController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDiscountDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Discount updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Discounts"
        ]
      },
      "delete": {
        "operationId": "DiscountController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Discount deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/api/roles": {
      "post": {
        "operationId": "RoleController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Role created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Roles"
        ]
      },
      "get": {
        "operationId": "RoleController_findAll",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: asc or desc",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search keyword (applies to name, email, etc.)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Skip N items (overrides page/perPage if set)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items (overrides perPage if set)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of roles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/api/roles/{id}": {
      "get": {
        "operationId": "RoleController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Roles"
        ]
      },
      "patch": {
        "operationId": "RoleController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRoleDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Roles"
        ]
      },
      "delete": {
        "operationId": "RoleController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Role deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/api/customers": {
      "post": {
        "operationId": "CustomerController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomerDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "get": {
        "operationId": "CustomerController_findAll",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Customer ID for filtering",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Customer name for filtering",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "required": false,
            "in": "query",
            "description": "Customer email for filtering",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "phone",
            "required": false,
            "in": "query",
            "description": "Customer phone for filtering",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDeleted",
            "required": false,
            "in": "query",
            "description": "Include deleted customers",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of customers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/api/customers/{id}": {
      "get": {
        "operationId": "CustomerController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "patch": {
        "operationId": "CustomerController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCustomerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Customers"
        ]
      },
      "delete": {
        "operationId": "CustomerController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": ""
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/api/customers/{id}/restore": {
      "post": {
        "operationId": "CustomerController_restore",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer restored successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Customers"
        ]
      }
    },
    "/api/sales": {
      "post": {
        "operationId": "SaleController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSaleDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sale created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Sales"
        ]
      },
      "get": {
        "operationId": "SaleController_findAll",
        "parameters": [
          {
            "name": "id",
            "required": false,
            "in": "query",
            "description": "Sale ID for filtering",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Customer ID for filtering",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Location ID for filtering",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdById",
            "required": false,
            "in": "query",
            "description": "Created by user ID for filtering",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for filtering (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for filtering (ISO string)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "minTotal",
            "required": false,
            "in": "query",
            "description": "Minimum total amount for filtering",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "maxTotal",
            "required": false,
            "in": "query",
            "description": "Maximum total amount for filtering",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number for pagination",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page for pagination",
            "schema": {
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sales with pagination",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Sales"
        ]
      }
    },
    "/api/sales/{id}": {
      "get": {
        "operationId": "SaleController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sale retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "tags": [
          "Sales"
        ]
      }
    },
    "/api/inventory": {
      "get": {
        "operationId": "InventoryController_findAllInventories",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: asc or desc",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search keyword (applies to name, email, etc.)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Skip N items (overrides page/perPage if set)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items (overrides perPage if set)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved inventories"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all inventories",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/api/inventory/query": {
      "post": {
        "operationId": "InventoryController_queryInventories",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QueryInventoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully queried inventories"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Query inventories with advanced filters",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/api/inventory/location/{locationId}": {
      "get": {
        "operationId": "InventoryController_findInventoryByLocation",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: asc or desc",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search keyword (applies to name, email, etc.)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Skip N items (overrides page/perPage if set)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items (overrides perPage if set)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved inventories for location"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get inventories by location",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/api/inventory/product/{productId}": {
      "get": {
        "operationId": "InventoryController_findInventoryByProduct",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved inventories for product"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get inventories by product",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/api/inventory/update": {
      "put": {
        "operationId": "InventoryController_updateInventory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateInventoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory updated successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update inventory quantity",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/api/inventory/adjust": {
      "post": {
        "operationId": "InventoryController_adjustInventory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdjustInventoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory adjusted successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Adjust inventory quantity",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/api/inventory/set": {
      "post": {
        "operationId": "InventoryController_setInventory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetInventoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Inventory set successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Set inventory quantity",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/api/inventory/alerts/low-stock": {
      "get": {
        "operationId": "InventoryController_getLowStockItems",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "threshold",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved low stock items"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get low stock items",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/api/inventory/alerts/out-of-stock": {
      "get": {
        "operationId": "InventoryController_getOutOfStockItems",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved out of stock items"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get out of stock items",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/api/inventory/logs": {
      "post": {
        "operationId": "InventoryController_createInventoryLog",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInventoryLogDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Inventory log created successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create inventory log",
        "tags": [
          "Inventory"
        ]
      },
      "get": {
        "operationId": "InventoryController_findAllInventoryLogs",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: asc or desc",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search keyword (applies to name, email, etc.)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Skip N items (overrides page/perPage if set)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items (overrides perPage if set)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved inventory logs"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all inventory logs",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/api/inventory/logs/product/{productId}": {
      "get": {
        "operationId": "InventoryController_findInventoryLogsByProduct",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: asc or desc",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search keyword (applies to name, email, etc.)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Skip N items (overrides page/perPage if set)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items (overrides perPage if set)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved inventory logs for product"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get inventory logs by product",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/api/inventory/logs/location/{locationId}": {
      "get": {
        "operationId": "InventoryController_findInventoryLogsByLocation",
        "parameters": [
          {
            "name": "locationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (starts at 1)",
            "schema": {
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "perPage",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order: asc or desc",
            "schema": {
              "example": "asc",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search keyword (applies to name, email, etc.)",
            "schema": {
              "example": "john",
              "type": "string"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "Skip N items (overrides page/perPage if set)",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Limit number of items (overrides perPage if set)",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved inventory logs for location"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get inventory logs by location",
        "tags": [
          "Inventory"
        ]
      }
    },
    "/api/analytics/dashboard": {
      "get": {
        "operationId": "AnalyticsController_getDashboard",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeRange",
            "required": false,
            "in": "query",
            "description": "Predefined time range",
            "schema": {
              "type": "string",
              "enum": [
                "today",
                "yesterday",
                "last_7_days",
                "last_30_days",
                "last_90_days",
                "this_month",
                "last_month",
                "this_year",
                "last_year",
                "custom"
              ]
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "Group data by time period",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Filter by location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Filter by product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Filter by customer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "compareWithPrevious",
            "required": false,
            "in": "query",
            "description": "Include comparison with previous period",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardOverviewDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get comprehensive dashboard overview analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/sales": {
      "get": {
        "operationId": "AnalyticsController_getSalesAnalytics",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeRange",
            "required": false,
            "in": "query",
            "description": "Predefined time range",
            "schema": {
              "type": "string",
              "enum": [
                "today",
                "yesterday",
                "last_7_days",
                "last_30_days",
                "last_90_days",
                "this_month",
                "last_month",
                "this_year",
                "last_year",
                "custom"
              ]
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "Group data by time period",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Filter by location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Filter by product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Filter by customer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "compareWithPrevious",
            "required": false,
            "in": "query",
            "description": "Include comparison with previous period",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sales analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SalesAnalyticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get detailed sales analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/inventory": {
      "get": {
        "operationId": "AnalyticsController_getInventoryAnalytics",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeRange",
            "required": false,
            "in": "query",
            "description": "Predefined time range",
            "schema": {
              "type": "string",
              "enum": [
                "today",
                "yesterday",
                "last_7_days",
                "last_30_days",
                "last_90_days",
                "this_month",
                "last_month",
                "this_year",
                "last_year",
                "custom"
              ]
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "Group data by time period",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Filter by location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Filter by product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Filter by customer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "compareWithPrevious",
            "required": false,
            "in": "query",
            "description": "Include comparison with previous period",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Inventory analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InventoryAnalyticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get detailed inventory analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/customers": {
      "get": {
        "operationId": "AnalyticsController_getCustomerAnalytics",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeRange",
            "required": false,
            "in": "query",
            "description": "Predefined time range",
            "schema": {
              "type": "string",
              "enum": [
                "today",
                "yesterday",
                "last_7_days",
                "last_30_days",
                "last_90_days",
                "this_month",
                "last_month",
                "this_year",
                "last_year",
                "custom"
              ]
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "Group data by time period",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Filter by location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Filter by product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Filter by customer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "compareWithPrevious",
            "required": false,
            "in": "query",
            "description": "Include comparison with previous period",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAnalyticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get detailed customer analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/products": {
      "get": {
        "operationId": "AnalyticsController_getProductAnalytics",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeRange",
            "required": false,
            "in": "query",
            "description": "Predefined time range",
            "schema": {
              "type": "string",
              "enum": [
                "today",
                "yesterday",
                "last_7_days",
                "last_30_days",
                "last_90_days",
                "this_month",
                "last_month",
                "this_year",
                "last_year",
                "custom"
              ]
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "Group data by time period",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Filter by location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Filter by product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Filter by customer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "compareWithPrevious",
            "required": false,
            "in": "query",
            "description": "Include comparison with previous period",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductAnalyticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get detailed product analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/returns": {
      "get": {
        "operationId": "AnalyticsController_getReturnAnalytics",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeRange",
            "required": false,
            "in": "query",
            "description": "Predefined time range",
            "schema": {
              "type": "string",
              "enum": [
                "today",
                "yesterday",
                "last_7_days",
                "last_30_days",
                "last_90_days",
                "this_month",
                "last_month",
                "this_year",
                "last_year",
                "custom"
              ]
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "Group data by time period",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Filter by location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Filter by product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Filter by customer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "compareWithPrevious",
            "required": false,
            "in": "query",
            "description": "Include comparison with previous period",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReturnAnalyticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get detailed return analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/financial": {
      "get": {
        "operationId": "AnalyticsController_getFinancialAnalytics",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeRange",
            "required": false,
            "in": "query",
            "description": "Predefined time range",
            "schema": {
              "type": "string",
              "enum": [
                "today",
                "yesterday",
                "last_7_days",
                "last_30_days",
                "last_90_days",
                "this_month",
                "last_month",
                "this_year",
                "last_year",
                "custom"
              ]
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "Group data by time period",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Filter by location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Filter by product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Filter by customer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "compareWithPrevious",
            "required": false,
            "in": "query",
            "description": "Include comparison with previous period",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Financial analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialAnalyticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get detailed financial analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/analytics/performance": {
      "get": {
        "operationId": "AnalyticsController_getPerformanceAnalytics",
        "parameters": [
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "description": "Start date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "description": "End date for analytics query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timeRange",
            "required": false,
            "in": "query",
            "description": "Predefined time range",
            "schema": {
              "type": "string",
              "enum": [
                "today",
                "yesterday",
                "last_7_days",
                "last_30_days",
                "last_90_days",
                "this_month",
                "last_month",
                "this_year",
                "last_year",
                "custom"
              ]
            }
          },
          {
            "name": "groupBy",
            "required": false,
            "in": "query",
            "description": "Group data by time period",
            "schema": {
              "type": "string",
              "enum": [
                "day",
                "week",
                "month",
                "quarter",
                "year"
              ]
            }
          },
          {
            "name": "locationId",
            "required": false,
            "in": "query",
            "description": "Filter by location ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "required": false,
            "in": "query",
            "description": "Filter by category ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "productId",
            "required": false,
            "in": "query",
            "description": "Filter by product ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": false,
            "in": "query",
            "description": "Filter by user ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customerId",
            "required": false,
            "in": "query",
            "description": "Filter by customer ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "compareWithPrevious",
            "required": false,
            "in": "query",
            "description": "Include comparison with previous period",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Performance analytics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PerformanceAnalyticsDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get detailed performance analytics",
        "tags": [
          "Analytics"
        ]
      }
    },
    "/api/returns": {
      "post": {
        "operationId": "ReturnController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReturnDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Return created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "summary": "Create a new return",
        "tags": [
          "Returns"
        ]
      },
      "get": {
        "operationId": "ReturnController_findAll",
        "parameters": [
          {
            "name": "saleId",
            "required": false,
            "in": "query",
            "schema": {
              "example": "sale_123",
              "type": "string"
            }
          },
          {
            "name": "customerEmail",
            "required": false,
            "in": "query",
            "schema": {
              "example": "customer@example.com",
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "minRefundAmount",
            "required": false,
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "maxRefundAmount",
            "required": false,
            "in": "query",
            "schema": {
              "example": 500,
              "type": "number"
            }
          },
          {
            "name": "reason",
            "required": false,
            "in": "query",
            "schema": {
              "example": "DAMAGED",
              "type": "string",
              "enum": [
                "DAMAGED",
                "CUSTOMER_REQUEST",
                "WRONG_ITEM",
                "OTHER"
              ]
            }
          },
          {
            "name": "restockable",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "processedBy",
            "required": false,
            "in": "query",
            "schema": {
              "example": "user_123",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "product damage",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "schema": {
              "example": "CREATED_AT",
              "type": "string",
              "enum": [
                "createdAt",
                "refundAmount",
                "saleId"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "schema": {
              "example": "DESC",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "summary": "Get all returns with pagination and filtering",
        "tags": [
          "Returns"
        ]
      }
    },
    "/api/returns/stats": {
      "get": {
        "operationId": "ReturnController_getStats",
        "parameters": [
          {
            "name": "saleId",
            "required": false,
            "in": "query",
            "schema": {
              "example": "sale_123",
              "type": "string"
            }
          },
          {
            "name": "customerEmail",
            "required": false,
            "in": "query",
            "schema": {
              "example": "customer@example.com",
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-01-01T00:00:00Z",
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "required": false,
            "in": "query",
            "schema": {
              "example": "2024-12-31T23:59:59Z",
              "type": "string"
            }
          },
          {
            "name": "minRefundAmount",
            "required": false,
            "in": "query",
            "schema": {
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "maxRefundAmount",
            "required": false,
            "in": "query",
            "schema": {
              "example": 500,
              "type": "number"
            }
          },
          {
            "name": "reason",
            "required": false,
            "in": "query",
            "schema": {
              "example": "DAMAGED",
              "type": "string",
              "enum": [
                "DAMAGED",
                "CUSTOMER_REQUEST",
                "WRONG_ITEM",
                "OTHER"
              ]
            }
          },
          {
            "name": "restockable",
            "required": false,
            "in": "query",
            "schema": {
              "example": true,
              "type": "boolean"
            }
          },
          {
            "name": "processedBy",
            "required": false,
            "in": "query",
            "schema": {
              "example": "user_123",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "schema": {
              "example": "product damage",
              "type": "string"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "schema": {
              "example": "CREATED_AT",
              "type": "string",
              "enum": [
                "createdAt",
                "refundAmount",
                "saleId"
              ]
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "schema": {
              "example": "DESC",
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return statistics retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "summary": "Get return statistics",
        "tags": [
          "Returns"
        ]
      }
    },
    "/api/returns/{id}": {
      "get": {
        "operationId": "ReturnController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Return ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "summary": "Get a return by ID",
        "tags": [
          "Returns"
        ]
      },
      "patch": {
        "operationId": "ReturnController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Return ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReturnDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "summary": "Update a return",
        "tags": [
          "Returns"
        ]
      },
      "delete": {
        "operationId": "ReturnController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Return ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "summary": "Delete a return",
        "tags": [
          "Returns"
        ]
      }
    },
    "/api/returns/{id}/process-refund": {
      "post": {
        "operationId": "ReturnController_processRefund",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Return ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Refund processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "summary": "Process refund for a return",
        "tags": [
          "Returns"
        ]
      }
    },
    "/api/returns/validate-return": {
      "post": {
        "operationId": "ReturnController_validateReturn",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReturnDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return validation completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "summary": "Validate return data before processing",
        "tags": [
          "Returns"
        ]
      }
    },
    "/api/returns/bulk-process": {
      "post": {
        "operationId": "ReturnController_bulkProcess",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "returnIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Array of return IDs to process"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Bulk processing completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "access_token": []
          }
        ],
        "summary": "Process multiple returns in bulk",
        "tags": [
          "Returns"
        ]
      }
    }
  },
  "info": {
    "title": "B2B SaaS Gateway API",
    "description": "API Gateway routes for platform microservices",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "securitySchemes": {
      "access_token": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Response message"
          },
          "data": {
            "type": "object",
            "description": "Response data"
          },
          "error": {
            "type": "string",
            "description": "Error details"
          },
          "meta": {
            "type": "object",
            "description": "Additional metadata"
          },
          "timestamp": {
            "type": "string",
            "description": "Response timestamp"
          }
        },
        "required": [
          "success",
          "message",
          "timestamp"
        ]
      },
      "CreateOrgDto": {
        "type": "object",
        "properties": {
          "businessName": {
            "type": "string",
            "example": "Acme Inc",
            "description": "The name of the business organization"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890",
            "description": "Phone number of the organization"
          },
          "email": {
            "type": "string",
            "example": "example@gmail.com",
            "description": "Email of the super admin"
          },
          "password": {
            "type": "string",
            "example": "securepassword123",
            "description": "Password for the super admin"
          },
          "subdomain": {
            "type": "string",
            "example": "dashboard",
            "description": "Subdomain for the organization"
          },
          "maxActiveUsers": {
            "type": "number",
            "example": 1,
            "description": "Maximum number of active users allowed for the organization",
            "minimum": 1,
            "default": 1
          },
          "maxStorageSize": {
            "type": "number",
            "example": 100,
            "description": "Maximum storage size (in MB) allowed for the organization",
            "minimum": 100,
            "default": 100
          }
        },
        "required": [
          "businessName",
          "phone",
          "email",
          "password",
          "subdomain"
        ]
      },
      "UpdateOrgDto": {
        "type": "object",
        "properties": {
          "businessName": {
            "type": "string",
            "example": "Acme Inc",
            "description": "The name of the business organization"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890",
            "description": "Phone number of the organization"
          },
          "email": {
            "type": "string",
            "example": "example@gmail.com",
            "description": "Email of the super admin"
          },
          "password": {
            "type": "string",
            "example": "securepassword123",
            "description": "Password for the super admin"
          },
          "subdomain": {
            "type": "string",
            "example": "dashboard",
            "description": "Subdomain for the organization"
          },
          "maxActiveUsers": {
            "type": "number",
            "example": 1,
            "description": "Maximum number of active users allowed for the organization",
            "minimum": 1,
            "default": 1
          },
          "maxStorageSize": {
            "type": "number",
            "example": 100,
            "description": "Maximum storage size (in MB) allowed for the organization",
            "minimum": 100,
            "default": 100
          }
        }
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "John",
            "description": "Full name of the user"
          },
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email address"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890",
            "description": "User phone number"
          },
          "password": {
            "type": "string",
            "example": "strongPassword123",
            "minLength": 6,
            "description": "User password"
          },
          "globalRole": {
            "type": "string",
            "example": "USER",
            "description": "Global role of the user",
            "enum": [
              "SUPER_ADMIN",
              "ADMIN",
              "USER"
            ],
            "default": "USER"
          },
          "active": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the user is active"
          }
        },
        "required": [
          "name",
          "email",
          "password"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "User email address"
          },
          "password": {
            "type": "string",
            "example": "newStrongPassword123",
            "minLength": 6,
            "description": "User password"
          },
          "name": {
            "type": "string",
            "example": "John",
            "description": "Full name of the user"
          },
          "phone": {
            "type": "string",
            "example": "+1234567890",
            "description": "User phone number"
          },
          "globalRole": {
            "type": "string",
            "example": "USER",
            "description": "Global role of the user",
            "enum": [
              "SUPER_ADMIN",
              "ADMIN",
              "USER"
            ]
          },
          "active": {
            "type": "boolean",
            "example": true,
            "description": "Indicates if the user is active"
          }
        }
      },
      "CreateLocationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Main Office"
          },
          "slug": {
            "type": "string",
            "example": "main-office-123-main-st",
            "description": "Auto-generated slug from name and address (can be overridden)"
          },
          "address": {
            "type": "string",
            "example": "123 Main St, Springfield, IL"
          },
          "phone": {
            "type": "string",
            "example": "+1-217-555-1234"
          },
          "email": {
            "type": "string",
            "example": "example@gmail.com"
          },
          "timezone": {
            "type": "string",
            "example": "America/Chicago"
          }
        },
        "required": [
          "name",
          "address"
        ]
      },
      "UpdateLocationDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Main Office",
            "description": "The name of the location"
          },
          "address": {
            "type": "string",
            "example": "123 Main St, Springfield, IL",
            "description": "Address of the location"
          },
          "slug": {
            "type": "string",
            "example": "main-office-123-main-st",
            "description": "Auto-generated slug from name and address (can be overridden)"
          },
          "phone": {
            "type": "string",
            "example": "+1-217-555-1234",
            "description": "Phone number of the location"
          },
          "email": {
            "type": "string",
            "example": "example@gmail.com",
            "description": "Email address for the location"
          },
          "timezone": {
            "type": "string",
            "example": "America/Chicago",
            "description": "Time zone of the location"
          }
        }
      },
      "DiscountDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "SUMMER20"
          },
          "type": {
            "type": "string",
            "example": "PERCENT",
            "enum": [
              "PERCENT",
              "FIXED"
            ]
          },
          "value": {
            "type": "number",
            "example": 20
          }
        },
        "required": [
          "code",
          "type",
          "value"
        ]
      },
      "BundleItemDto": {
        "type": "object",
        "properties": {
          "itemId": {
            "type": "string",
            "example": "prod_456def"
          },
          "quantity": {
            "type": "number",
            "example": 1
          }
        },
        "required": [
          "itemId",
          "quantity"
        ]
      },
      "ProductLocationPricingDto": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "example": "loc_123"
          },
          "price": {
            "type": "number",
            "example": 120
          },
          "costPrice": {
            "type": "number",
            "example": 80
          },
          "available": {
            "type": "boolean",
            "example": true
          },
          "minStock": {
            "type": "number",
            "example": 10
          },
          "stockStatus": {
            "type": "string",
            "example": "in_stock"
          }
        },
        "required": [
          "locationId",
          "price"
        ]
      },
      "CreateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Wireless Mouse"
          },
          "slug": {
            "type": "string",
            "example": "wireless-mouse",
            "description": "Auto-generated slug from name (can be overridden)"
          },
          "sku": {
            "type": "string",
            "example": "SKU-WM-001"
          },
          "barcode": {
            "type": "string",
            "example": "1234567890123"
          },
          "kind": {
            "type": "string",
            "enum": [
              "PHYSICAL",
              "SERVICE",
              "DIGITAL",
              "PACKAGE"
            ],
            "example": "PHYSICAL"
          },
          "price": {
            "type": "number",
            "example": 100
          },
          "trackInventory": {
            "type": "boolean",
            "example": true
          },
          "isBundle": {
            "type": "boolean",
            "example": false
          },
          "bundlePrice": {
            "type": "number",
            "example": 150
          },
          "unitId": {
            "type": "string",
            "example": "unit_id_123"
          },
          "imageUrl": {
            "type": "string",
            "example": "https://example.com/image.jpg"
          },
          "barcodeType": {
            "type": "string",
            "example": "EAN-13"
          },
          "categoryId": {
            "type": "string",
            "example": "category_id_123"
          },
          "taxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountDto"
            }
          },
          "bundleItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BundleItemDto"
            }
          },
          "locationPricing": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductLocationPricingDto"
            }
          },
          "attributes": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "kind",
          "price"
        ]
      },
      "UpdateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Wireless Mouse"
          },
          "slug": {
            "type": "string",
            "example": "wireless-mouse",
            "description": "Auto-generated slug from name (can be overridden)"
          },
          "sku": {
            "type": "string",
            "example": "SKU-WM-001"
          },
          "barcode": {
            "type": "string",
            "example": "1234567890123"
          },
          "kind": {
            "type": "string",
            "enum": [
              "PHYSICAL",
              "SERVICE",
              "DIGITAL",
              "PACKAGE"
            ],
            "example": "PHYSICAL"
          },
          "price": {
            "type": "number",
            "example": 100
          },
          "trackInventory": {
            "type": "boolean",
            "example": true
          },
          "isBundle": {
            "type": "boolean",
            "example": false
          },
          "bundlePrice": {
            "type": "number",
            "example": 150
          },
          "unitId": {
            "type": "string",
            "example": "unit_id_123"
          },
          "imageUrl": {
            "type": "string",
            "example": "https://example.com/image.jpg"
          },
          "barcodeType": {
            "type": "string",
            "example": "EAN-13"
          },
          "categoryId": {
            "type": "string",
            "example": "category_id_123"
          },
          "taxIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DiscountDto"
            }
          },
          "bundleItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BundleItemDto"
            }
          },
          "locationPricing": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductLocationPricingDto"
            }
          },
          "attributes": {
            "type": "object"
          }
        }
      },
      "ProductSearchDto": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "example": "wireless mouse"
          },
          "categoryId": {
            "type": "string",
            "example": "cat_123"
          },
          "kind": {
            "type": "string",
            "example": "PHYSICAL",
            "enum": [
              "PHYSICAL",
              "SERVICE",
              "DIGITAL",
              "PACKAGE"
            ]
          },
          "minPrice": {
            "type": "number",
            "example": 10
          },
          "maxPrice": {
            "type": "number",
            "example": 500
          },
          "trackInventory": {
            "type": "boolean",
            "example": true
          },
          "isBundle": {
            "type": "boolean",
            "example": false
          },
          "hasVariants": {
            "type": "boolean",
            "example": true
          },
          "locationId": {
            "type": "string",
            "example": "loc_123"
          },
          "taxIds": {
            "example": [
              "tax_123",
              "tax_456"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sortBy": {
            "type": "string",
            "example": "NAME",
            "enum": [
              "name",
              "price",
              "createdAt",
              "updatedAt",
              "sku"
            ]
          },
          "sortOrder": {
            "type": "string",
            "example": "ASC",
            "enum": [
              "asc",
              "desc"
            ]
          },
          "page": {
            "type": "number",
            "example": 1,
            "minimum": 1
          },
          "limit": {
            "type": "number",
            "example": 10,
            "minimum": 1,
            "maximum": 100
          }
        }
      },
      "ProductVariantOptionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Color"
          },
          "value": {
            "type": "string",
            "example": "Red"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "CreateProductVariantDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Wireless Mouse - Red"
          },
          "sku": {
            "type": "string",
            "example": "SKU-WM-RED-001"
          },
          "barcode": {
            "type": "string",
            "example": "1234567890124"
          },
          "price": {
            "type": "number",
            "example": 105
          },
          "imageUrl": {
            "type": "string",
            "example": "https://example.com/red-mouse.jpg"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantOptionDto"
            }
          },
          "trackInventory": {
            "type": "boolean",
            "example": true
          },
          "attributes": {
            "type": "object"
          }
        },
        "required": [
          "name",
          "price",
          "options"
        ]
      },
      "UpdateProductVariantDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Wireless Mouse - Red"
          },
          "sku": {
            "type": "string",
            "example": "SKU-WM-RED-001"
          },
          "barcode": {
            "type": "string",
            "example": "1234567890124"
          },
          "price": {
            "type": "number",
            "example": 105
          },
          "imageUrl": {
            "type": "string",
            "example": "https://example.com/red-mouse.jpg"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProductVariantOptionDto"
            }
          },
          "trackInventory": {
            "type": "boolean",
            "example": true
          },
          "attributes": {
            "type": "object"
          }
        }
      },
      "UpdateProductLocationPricingDto": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "example": 120
          },
          "costPrice": {
            "type": "number",
            "example": 80
          },
          "available": {
            "type": "boolean",
            "example": true
          },
          "minStock": {
            "type": "number",
            "example": 10
          },
          "stockStatus": {
            "type": "string",
            "example": "in_stock"
          }
        }
      },
      "BulkProductImportDto": {
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateProductDto"
            }
          },
          "skipDuplicates": {
            "type": "boolean",
            "example": true
          },
          "updateExisting": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "products"
        ]
      },
      "BulkProductUpdateDto": {
        "type": "object",
        "properties": {
          "productIds": {
            "example": [
              "prod_123",
              "prod_456"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "categoryId": {
            "type": "string",
            "example": "cat_123"
          },
          "taxIds": {
            "example": [
              "tax_123",
              "tax_456"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "trackInventory": {
            "type": "boolean",
            "example": true
          },
          "attributes": {
            "type": "object"
          }
        },
        "required": [
          "productIds"
        ]
      },
      "BulkProductDeleteDto": {
        "type": "object",
        "properties": {
          "productIds": {
            "example": [
              "prod_123",
              "prod_456"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "hardDelete": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "productIds"
        ]
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name",
            "example": "Electronics",
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "description": "Category slug (auto-generated if not provided)",
            "example": "electronics",
            "maxLength": 255
          },
          "parentId": {
            "type": "string",
            "description": "Parent category ID for hierarchical structure",
            "example": "uuid-string"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Category name",
            "example": "Electronics",
            "maxLength": 255
          },
          "slug": {
            "type": "string",
            "description": "Category slug (auto-generated if not provided)",
            "example": "electronics",
            "maxLength": 255
          },
          "parentId": {
            "type": "string",
            "description": "Parent category ID for hierarchical structure",
            "example": "uuid-string"
          }
        }
      },
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "user@example.com",
            "description": "Email address of the user"
          },
          "password": {
            "type": "string",
            "example": "password123",
            "description": "Plain-text password of the user"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "CreateTaxDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "VAT"
          },
          "rate": {
            "type": "number",
            "example": 15,
            "description": "Tax rate as a percentage"
          },
          "isInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Whether the tax is included in the product price"
          }
        },
        "required": [
          "name",
          "rate"
        ]
      },
      "UpdateTaxDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "VAT"
          },
          "rate": {
            "type": "number",
            "example": 15,
            "description": "Tax rate as a percentage"
          },
          "isInclusive": {
            "type": "boolean",
            "example": false,
            "description": "Whether the tax is included in the product price"
          }
        }
      },
      "CreateDiscountDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Holiday Sale"
          },
          "code": {
            "type": "string",
            "example": "HOLIDAY2025"
          },
          "type": {
            "type": "string",
            "enum": [
              "PERCENT",
              "FIXED"
            ],
            "example": "PERCENT"
          },
          "value": {
            "type": "number",
            "example": 10
          },
          "appliesAutomatically": {
            "type": "boolean",
            "example": true
          },
          "allowStacking": {
            "type": "boolean",
            "example": false
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "minPurchaseAmount": {
            "type": "number",
            "example": 100
          },
          "minQuantity": {
            "type": "number",
            "example": 1
          },
          "maxUses": {
            "type": "number",
            "example": 100
          },
          "startAt": {
            "type": "string"
          },
          "endAt": {
            "type": "string"
          },
          "productIds": {
            "description": "Array of product IDs this discount applies to",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "type",
          "value"
        ]
      },
      "UpdateDiscountDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Holiday Sale"
          },
          "code": {
            "type": "string",
            "example": "HOLIDAY2025"
          },
          "type": {
            "type": "string",
            "enum": [
              "PERCENT",
              "FIXED"
            ],
            "example": "PERCENT"
          },
          "value": {
            "type": "number",
            "example": 10
          },
          "appliesAutomatically": {
            "type": "boolean",
            "example": true
          },
          "allowStacking": {
            "type": "boolean",
            "example": false
          },
          "active": {
            "type": "boolean",
            "example": true
          },
          "minPurchaseAmount": {
            "type": "number",
            "example": 100
          },
          "minQuantity": {
            "type": "number",
            "example": 1
          },
          "maxUses": {
            "type": "number",
            "example": 100
          },
          "startAt": {
            "type": "string"
          },
          "endAt": {
            "type": "string"
          },
          "productIds": {
            "description": "Array of product IDs this discount applies to",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateRoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Admin",
            "description": "Name of the role"
          },
          "permissions": {
            "example": [
              "create_user",
              "update_user",
              "delete_user"
            ],
            "description": "List of permission IDs associated with the role",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name",
          "permissions"
        ]
      },
      "UpdateRoleDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Manager",
            "description": "Updated role name"
          },
          "permissions": {
            "example": [
              "permission-id-1",
              "permission-id-3"
            ],
            "description": "Updated list of permission IDs",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateCustomerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Customer name",
            "example": "John Doe",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "Customer email address",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "description": "Customer phone number",
            "example": "+1234567890",
            "maxLength": 20
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateCustomerDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Customer name",
            "example": "John Doe",
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "Customer email address",
            "example": "john.doe@example.com"
          },
          "phone": {
            "type": "string",
            "description": "Customer phone number",
            "example": "+1234567890",
            "maxLength": 20
          }
        }
      },
      "CreateSaleItemDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID"
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of the product",
            "minimum": 1
          },
          "unitPrice": {
            "type": "number",
            "description": "Unit price override (optional)"
          },
          "unitDiscount": {
            "type": "number",
            "description": "Unit discount override (optional)"
          }
        },
        "required": [
          "productId",
          "quantity"
        ]
      },
      "CreateSaleDto": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string",
            "description": "Location ID where the sale is made"
          },
          "customerId": {
            "type": "string",
            "description": "Customer ID (optional for walk-in customers)"
          },
          "items": {
            "description": "Sale items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateSaleItemDto"
            }
          },
          "globalDiscount": {
            "type": "number",
            "description": "Global discount amount for the entire sale (optional)"
          },
          "notes": {
            "type": "string",
            "description": "Notes for the sale (optional)"
          }
        },
        "required": [
          "locationId",
          "items"
        ]
      },
      "QueryInventoryDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID for filtering"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID for filtering"
          },
          "minQuantity": {
            "type": "number",
            "description": "Minimum quantity for filtering"
          },
          "maxQuantity": {
            "type": "number",
            "description": "Maximum quantity for filtering"
          },
          "search": {
            "type": "string",
            "description": "Search term for product name or SKU"
          },
          "lowStockOnly": {
            "type": "boolean",
            "description": "Show only low stock items",
            "default": false
          },
          "outOfStockOnly": {
            "type": "boolean",
            "description": "Show only out of stock items",
            "default": false
          },
          "page": {
            "type": "number",
            "description": "Page number for pagination",
            "default": 1
          },
          "limit": {
            "type": "number",
            "description": "Items per page for pagination",
            "default": 20
          }
        }
      },
      "UpdateInventoryDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "uuid-string"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID",
            "example": "uuid-string"
          },
          "quantity": {
            "type": "number",
            "description": "New quantity",
            "example": 100
          }
        },
        "required": [
          "productId",
          "locationId",
          "quantity"
        ]
      },
      "AdjustInventoryDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "uuid-string"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID",
            "example": "uuid-string"
          },
          "adjustment": {
            "type": "number",
            "description": "Quantity adjustment (positive for increase, negative for decrease)",
            "example": 10
          },
          "reason": {
            "type": "string",
            "description": "Reason for the inventory adjustment",
            "enum": [
              "SALE",
              "RETURN",
              "ADJUSTMENT",
              "TRANSFER"
            ],
            "example": "ADJUSTMENT"
          },
          "note": {
            "type": "string",
            "description": "Note about the inventory adjustment",
            "example": "Stock count correction"
          }
        },
        "required": [
          "productId",
          "locationId",
          "adjustment",
          "reason"
        ]
      },
      "SetInventoryDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "uuid-string"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID",
            "example": "uuid-string"
          },
          "quantity": {
            "type": "number",
            "description": "New quantity to set",
            "example": 100
          },
          "reason": {
            "type": "string",
            "description": "Reason for setting the inventory",
            "enum": [
              "SALE",
              "RETURN",
              "ADJUSTMENT",
              "TRANSFER"
            ],
            "example": "ADJUSTMENT"
          },
          "note": {
            "type": "string",
            "description": "Note about the inventory change",
            "example": "Initial stock count"
          }
        },
        "required": [
          "productId",
          "locationId",
          "quantity",
          "reason"
        ]
      },
      "CreateInventoryLogDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Product ID",
            "example": "uuid-string"
          },
          "locationId": {
            "type": "string",
            "description": "Location ID",
            "example": "uuid-string"
          },
          "change": {
            "type": "number",
            "description": "Quantity change (positive for increase, negative for decrease)",
            "example": 10
          },
          "beforeQuantity": {
            "type": "number",
            "description": "Quantity before the change",
            "example": 50
          },
          "afterQuantity": {
            "type": "number",
            "description": "Quantity after the change",
            "example": 60
          },
          "note": {
            "type": "string",
            "description": "Note about the inventory change",
            "example": "Stock replenishment"
          },
          "reason": {
            "type": "string",
            "description": "Reason for inventory change",
            "enum": [
              "SALE",
              "RETURN",
              "ADJUSTMENT",
              "TRANSFER"
            ],
            "example": "ADJUSTMENT"
          }
        },
        "required": [
          "productId",
          "locationId",
          "change",
          "reason"
        ]
      },
      "DashboardSalesDto": {
        "type": "object",
        "properties": {
          "totalRevenue": {
            "type": "number"
          },
          "totalTransactions": {
            "type": "number"
          },
          "averageOrderValue": {
            "type": "number"
          },
          "changeFromPrevious": {
            "type": "number"
          }
        },
        "required": [
          "totalRevenue",
          "totalTransactions",
          "averageOrderValue",
          "changeFromPrevious"
        ]
      },
      "DashboardInventoryDto": {
        "type": "object",
        "properties": {
          "totalProducts": {
            "type": "number"
          },
          "lowStockAlerts": {
            "type": "number"
          },
          "outOfStockItems": {
            "type": "number"
          },
          "totalInventoryValue": {
            "type": "number"
          }
        },
        "required": [
          "totalProducts",
          "lowStockAlerts",
          "outOfStockItems",
          "totalInventoryValue"
        ]
      },
      "DashboardCustomersDto": {
        "type": "object",
        "properties": {
          "totalCustomers": {
            "type": "number"
          },
          "newCustomers": {
            "type": "number"
          },
          "returningCustomers": {
            "type": "number"
          },
          "customerGrowthRate": {
            "type": "number"
          }
        },
        "required": [
          "totalCustomers",
          "newCustomers",
          "returningCustomers",
          "customerGrowthRate"
        ]
      },
      "ReturnReasonDto": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string"
          },
          "count": {
            "type": "number"
          },
          "percentage": {
            "type": "number"
          }
        },
        "required": [
          "reason",
          "count",
          "percentage"
        ]
      },
      "DashboardReturnsDto": {
        "type": "object",
        "properties": {
          "totalReturns": {
            "type": "number"
          },
          "returnRate": {
            "type": "number"
          },
          "refundAmount": {
            "type": "number"
          },
          "returnReasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnReasonDto"
            }
          }
        },
        "required": [
          "totalReturns",
          "returnRate",
          "refundAmount",
          "returnReasons"
        ]
      },
      "AlertDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "warning",
              "error",
              "info"
            ]
          },
          "message": {
            "type": "string"
          },
          "actionRequired": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "message",
          "actionRequired"
        ]
      },
      "DashboardOverviewDto": {
        "type": "object",
        "properties": {
          "sales": {
            "$ref": "#/components/schemas/DashboardSalesDto"
          },
          "inventory": {
            "$ref": "#/components/schemas/DashboardInventoryDto"
          },
          "customers": {
            "$ref": "#/components/schemas/DashboardCustomersDto"
          },
          "returns": {
            "$ref": "#/components/schemas/DashboardReturnsDto"
          },
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertDto"
            }
          }
        },
        "required": [
          "sales",
          "inventory",
          "customers",
          "returns",
          "alerts"
        ]
      },
      "MetricChangeDto": {
        "type": "object",
        "properties": {
          "revenue": {
            "type": "number"
          },
          "transactions": {
            "type": "number"
          },
          "averageOrderValue": {
            "type": "number"
          }
        },
        "required": [
          "revenue",
          "transactions",
          "averageOrderValue"
        ]
      },
      "TimeSeriesDataDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "revenue": {
            "type": "number"
          },
          "transactions": {
            "type": "number"
          }
        },
        "required": [
          "date",
          "revenue",
          "transactions"
        ]
      },
      "TopProductDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "revenue": {
            "type": "number"
          }
        },
        "required": [
          "productId",
          "productName",
          "quantity",
          "revenue"
        ]
      },
      "LocationSalesDto": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationName": {
            "type": "string"
          },
          "revenue": {
            "type": "number"
          },
          "transactions": {
            "type": "number"
          }
        },
        "required": [
          "locationId",
          "locationName",
          "revenue",
          "transactions"
        ]
      },
      "PaymentMethodDto": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string"
          },
          "count": {
            "type": "number"
          },
          "amount": {
            "type": "number"
          }
        },
        "required": [
          "method",
          "count",
          "amount"
        ]
      },
      "SalesAnalyticsDto": {
        "type": "object",
        "properties": {
          "totalRevenue": {
            "type": "number"
          },
          "totalTransactions": {
            "type": "number"
          },
          "averageOrderValue": {
            "type": "number"
          },
          "totalTax": {
            "type": "number"
          },
          "totalDiscount": {
            "type": "number"
          },
          "netRevenue": {
            "type": "number"
          },
          "changeFromPrevious": {
            "$ref": "#/components/schemas/MetricChangeDto"
          },
          "timeSeries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeSeriesDataDto"
            }
          },
          "topSellingProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopProductDto"
            }
          },
          "salesByLocation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationSalesDto"
            }
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentMethodDto"
            }
          }
        },
        "required": [
          "totalRevenue",
          "totalTransactions",
          "averageOrderValue",
          "totalTax",
          "totalDiscount",
          "netRevenue",
          "changeFromPrevious",
          "timeSeries",
          "topSellingProducts",
          "salesByLocation",
          "paymentMethods"
        ]
      },
      "InventoryChangeDto": {
        "type": "object",
        "properties": {
          "stockValue": {
            "type": "number"
          },
          "lowStockItems": {
            "type": "number"
          },
          "outOfStockItems": {
            "type": "number"
          }
        },
        "required": [
          "stockValue",
          "lowStockItems",
          "outOfStockItems"
        ]
      },
      "CategoryBreakdownDto": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string"
          },
          "categoryName": {
            "type": "string"
          },
          "productCount": {
            "type": "number"
          },
          "stockValue": {
            "type": "number"
          },
          "averageStockLevel": {
            "type": "number"
          }
        },
        "required": [
          "categoryId",
          "categoryName",
          "productCount",
          "stockValue",
          "averageStockLevel"
        ]
      },
      "LowStockAlertDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "currentStock": {
            "type": "number"
          },
          "minStockLevel": {
            "type": "number"
          },
          "locationId": {
            "type": "string"
          },
          "locationName": {
            "type": "string"
          }
        },
        "required": [
          "productId",
          "productName",
          "currentStock",
          "minStockLevel",
          "locationId",
          "locationName"
        ]
      },
      "StockMovementDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "in",
              "out",
              "adjustment"
            ]
          },
          "quantity": {
            "type": "number"
          },
          "value": {
            "type": "number"
          }
        },
        "required": [
          "date",
          "type",
          "quantity",
          "value"
        ]
      },
      "InventoryAnalyticsDto": {
        "type": "object",
        "properties": {
          "totalProducts": {
            "type": "number"
          },
          "totalStockValue": {
            "type": "number"
          },
          "lowStockItems": {
            "type": "number"
          },
          "outOfStockItems": {
            "type": "number"
          },
          "averageStockLevel": {
            "type": "number"
          },
          "stockTurnover": {
            "type": "number"
          },
          "changeFromPrevious": {
            "$ref": "#/components/schemas/InventoryChangeDto"
          },
          "categoryBreakdown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryBreakdownDto"
            }
          },
          "lowStockAlerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LowStockAlertDto"
            }
          },
          "stockMovements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StockMovementDto"
            }
          }
        },
        "required": [
          "totalProducts",
          "totalStockValue",
          "lowStockItems",
          "outOfStockItems",
          "averageStockLevel",
          "stockTurnover",
          "changeFromPrevious",
          "categoryBreakdown",
          "lowStockAlerts",
          "stockMovements"
        ]
      },
      "CustomerChangeDto": {
        "type": "object",
        "properties": {
          "totalCustomers": {
            "type": "number"
          },
          "newCustomers": {
            "type": "number"
          },
          "averageCustomerValue": {
            "type": "number"
          }
        },
        "required": [
          "totalCustomers",
          "newCustomers",
          "averageCustomerValue"
        ]
      },
      "CustomerSegmentDto": {
        "type": "object",
        "properties": {
          "segment": {
            "type": "string"
          },
          "count": {
            "type": "number"
          },
          "averageValue": {
            "type": "number"
          }
        },
        "required": [
          "segment",
          "count",
          "averageValue"
        ]
      },
      "TopCustomerDto": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string"
          },
          "customerName": {
            "type": "string"
          },
          "totalSpent": {
            "type": "number"
          },
          "totalOrders": {
            "type": "number"
          },
          "lastOrderDate": {
            "type": "string"
          }
        },
        "required": [
          "customerId",
          "customerName",
          "totalSpent",
          "totalOrders",
          "lastOrderDate"
        ]
      },
      "CustomerGrowthDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "newCustomers": {
            "type": "number"
          },
          "totalCustomers": {
            "type": "number"
          }
        },
        "required": [
          "date",
          "newCustomers",
          "totalCustomers"
        ]
      },
      "CustomerAnalyticsDto": {
        "type": "object",
        "properties": {
          "totalCustomers": {
            "type": "number"
          },
          "newCustomers": {
            "type": "number"
          },
          "returningCustomers": {
            "type": "number"
          },
          "averageCustomerValue": {
            "type": "number"
          },
          "customerRetentionRate": {
            "type": "number"
          },
          "customerLifetimeValue": {
            "type": "number"
          },
          "changeFromPrevious": {
            "$ref": "#/components/schemas/CustomerChangeDto"
          },
          "customerSegments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerSegmentDto"
            }
          },
          "topCustomers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopCustomerDto"
            }
          },
          "customerGrowth": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomerGrowthDto"
            }
          }
        },
        "required": [
          "totalCustomers",
          "newCustomers",
          "returningCustomers",
          "averageCustomerValue",
          "customerRetentionRate",
          "customerLifetimeValue",
          "changeFromPrevious",
          "customerSegments",
          "topCustomers",
          "customerGrowth"
        ]
      },
      "ProductChangeDto": {
        "type": "object",
        "properties": {
          "totalProducts": {
            "type": "number"
          },
          "averagePrice": {
            "type": "number"
          },
          "totalRevenue": {
            "type": "number"
          }
        },
        "required": [
          "totalProducts",
          "averagePrice",
          "totalRevenue"
        ]
      },
      "TopSellingProductDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "quantitySold": {
            "type": "number"
          },
          "revenue": {
            "type": "number"
          },
          "averageRating": {
            "type": "number"
          }
        },
        "required": [
          "productId",
          "productName",
          "quantitySold",
          "revenue"
        ]
      },
      "CategoryPerformanceDto": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "string"
          },
          "categoryName": {
            "type": "string"
          },
          "productCount": {
            "type": "number"
          },
          "totalRevenue": {
            "type": "number"
          },
          "averagePrice": {
            "type": "number"
          }
        },
        "required": [
          "categoryId",
          "categoryName",
          "productCount",
          "totalRevenue",
          "averagePrice"
        ]
      },
      "PriceRangeDto": {
        "type": "object",
        "properties": {
          "min": {
            "type": "number"
          },
          "max": {
            "type": "number"
          }
        },
        "required": [
          "min",
          "max"
        ]
      },
      "PriceAnalysisDto": {
        "type": "object",
        "properties": {
          "averagePrice": {
            "type": "number"
          },
          "medianPrice": {
            "type": "number"
          },
          "priceRange": {
            "$ref": "#/components/schemas/PriceRangeDto"
          }
        },
        "required": [
          "averagePrice",
          "medianPrice",
          "priceRange"
        ]
      },
      "ProfitabilityAnalysisDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "cost": {
            "type": "number"
          },
          "price": {
            "type": "number"
          },
          "profit": {
            "type": "number"
          },
          "profitMargin": {
            "type": "number"
          }
        },
        "required": [
          "productId",
          "productName",
          "cost",
          "price",
          "profit",
          "profitMargin"
        ]
      },
      "ProductAnalyticsDto": {
        "type": "object",
        "properties": {
          "totalProducts": {
            "type": "number"
          },
          "totalVariants": {
            "type": "number"
          },
          "averagePrice": {
            "type": "number"
          },
          "totalRevenue": {
            "type": "number"
          },
          "bestPerformingCategory": {
            "type": "string"
          },
          "changeFromPrevious": {
            "$ref": "#/components/schemas/ProductChangeDto"
          },
          "topSellingProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopSellingProductDto"
            }
          },
          "categoryPerformance": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryPerformanceDto"
            }
          },
          "priceAnalysis": {
            "$ref": "#/components/schemas/PriceAnalysisDto"
          },
          "profitabilityAnalysis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProfitabilityAnalysisDto"
            }
          }
        },
        "required": [
          "totalProducts",
          "totalVariants",
          "averagePrice",
          "totalRevenue",
          "bestPerformingCategory",
          "changeFromPrevious",
          "topSellingProducts",
          "categoryPerformance",
          "priceAnalysis",
          "profitabilityAnalysis"
        ]
      },
      "ReturnChangeDto": {
        "type": "object",
        "properties": {
          "totalReturns": {
            "type": "number"
          },
          "returnRate": {
            "type": "number"
          },
          "totalRefundAmount": {
            "type": "number"
          }
        },
        "required": [
          "totalReturns",
          "returnRate",
          "totalRefundAmount"
        ]
      },
      "ReturnByProductDto": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string"
          },
          "productName": {
            "type": "string"
          },
          "returnCount": {
            "type": "number"
          },
          "returnRate": {
            "type": "number"
          },
          "refundAmount": {
            "type": "number"
          }
        },
        "required": [
          "productId",
          "productName",
          "returnCount",
          "returnRate",
          "refundAmount"
        ]
      },
      "ReturnTimelineDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "returnCount": {
            "type": "number"
          },
          "refundAmount": {
            "type": "number"
          }
        },
        "required": [
          "date",
          "returnCount",
          "refundAmount"
        ]
      },
      "ReturnByLocationDto": {
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationName": {
            "type": "string"
          },
          "returnCount": {
            "type": "number"
          },
          "returnRate": {
            "type": "number"
          }
        },
        "required": [
          "locationId",
          "locationName",
          "returnCount",
          "returnRate"
        ]
      },
      "ReturnAnalyticsDto": {
        "type": "object",
        "properties": {
          "totalReturns": {
            "type": "number"
          },
          "totalRefundAmount": {
            "type": "number"
          },
          "returnRate": {
            "type": "number"
          },
          "averageRefundAmount": {
            "type": "number"
          },
          "averageProcessingTime": {
            "type": "number"
          },
          "changeFromPrevious": {
            "$ref": "#/components/schemas/ReturnChangeDto"
          },
          "returnReasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnReasonDto"
            }
          },
          "returnsByProduct": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnByProductDto"
            }
          },
          "returnTimeline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnTimelineDto"
            }
          },
          "returnsByLocation": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReturnByLocationDto"
            }
          }
        },
        "required": [
          "totalReturns",
          "totalRefundAmount",
          "returnRate",
          "averageRefundAmount",
          "averageProcessingTime",
          "changeFromPrevious",
          "returnReasons",
          "returnsByProduct",
          "returnTimeline",
          "returnsByLocation"
        ]
      },
      "FinancialChangeDto": {
        "type": "object",
        "properties": {
          "grossRevenue": {
            "type": "number"
          },
          "netRevenue": {
            "type": "number"
          },
          "grossProfit": {
            "type": "number"
          }
        },
        "required": [
          "grossRevenue",
          "netRevenue",
          "grossProfit"
        ]
      },
      "RevenueBreakdownDto": {
        "type": "object",
        "properties": {
          "sales": {
            "type": "number"
          },
          "taxes": {
            "type": "number"
          },
          "discounts": {
            "type": "number"
          },
          "refunds": {
            "type": "number"
          }
        },
        "required": [
          "sales",
          "taxes",
          "discounts",
          "refunds"
        ]
      },
      "ProfitAnalysisDto": {
        "type": "object",
        "properties": {
          "grossProfit": {
            "type": "number"
          },
          "operatingProfit": {
            "type": "number"
          },
          "netProfit": {
            "type": "number"
          },
          "profitMargin": {
            "type": "number"
          }
        },
        "required": [
          "grossProfit",
          "operatingProfit",
          "netProfit",
          "profitMargin"
        ]
      },
      "CashFlowDto": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "inflow": {
            "type": "number"
          },
          "outflow": {
            "type": "number"
          },
          "netFlow": {
            "type": "number"
          }
        },
        "required": [
          "date",
          "inflow",
          "outflow",
          "netFlow"
        ]
      },
      "ExpenseCategoryDto": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "percentage": {
            "type": "number"
          }
        },
        "required": [
          "category",
          "amount",
          "percentage"
        ]
      },
      "FinancialAnalyticsDto": {
        "type": "object",
        "properties": {
          "grossRevenue": {
            "type": "number"
          },
          "netRevenue": {
            "type": "number"
          },
          "totalCosts": {
            "type": "number"
          },
          "grossProfit": {
            "type": "number"
          },
          "grossProfitMargin": {
            "type": "number"
          },
          "totalTax": {
            "type": "number"
          },
          "totalDiscounts": {
            "type": "number"
          },
          "changeFromPrevious": {
            "$ref": "#/components/schemas/FinancialChangeDto"
          },
          "revenueBreakdown": {
            "$ref": "#/components/schemas/RevenueBreakdownDto"
          },
          "profitAnalysis": {
            "$ref": "#/components/schemas/ProfitAnalysisDto"
          },
          "cashFlow": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CashFlowDto"
            }
          },
          "expenseCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExpenseCategoryDto"
            }
          }
        },
        "required": [
          "grossRevenue",
          "netRevenue",
          "totalCosts",
          "grossProfit",
          "grossProfitMargin",
          "totalTax",
          "totalDiscounts",
          "changeFromPrevious",
          "revenueBreakdown",
          "profitAnalysis",
          "cashFlow",
          "expenseCategories"
        ]
      },
      "SalesPerformanceDto": {
        "type": "object",
        "properties": {
          "dailyAverage": {
            "type": "number"
          },
          "weeklyAverage": {
            "type": "number"
          },
          "monthlyAverage": {
            "type": "number"
          },
          "peakHour": {
            "type": "string"
          },
          "peakDay": {
            "type": "string"
          }
        },
        "required": [
          "dailyAverage",
          "weeklyAverage",
          "monthlyAverage",
          "peakHour",
          "peakDay"
        ]
      },
      "OperationalMetricsDto": {
        "type": "object",
        "properties": {
          "averageTransactionTime": {
            "type": "number"
          },
          "customerSatisfactionScore": {
            "type": "number"
          },
          "employeeProductivity": {
            "type": "number"
          },
          "inventoryTurnover": {
            "type": "number"
          }
        },
        "required": [
          "averageTransactionTime",
          "customerSatisfactionScore",
          "employeeProductivity",
          "inventoryTurnover"
        ]
      },
      "TrendDto": {
        "type": "object",
        "properties": {
          "metric": {
            "type": "string"
          },
          "trend": {
            "type": "string",
            "enum": [
              "up",
              "down",
              "stable"
            ]
          },
          "changePercentage": {
            "type": "number"
          },
          "significance": {
            "type": "string",
            "enum": [
              "high",
              "medium",
              "low"
            ]
          }
        },
        "required": [
          "metric",
          "trend",
          "changePercentage",
          "significance"
        ]
      },
      "BenchmarkMetricsDto": {
        "type": "object",
        "properties": {
          "salesPerDay": {
            "type": "number"
          },
          "customerRetention": {
            "type": "number"
          },
          "averageOrderValue": {
            "type": "number"
          }
        },
        "required": [
          "salesPerDay",
          "customerRetention",
          "averageOrderValue"
        ]
      },
      "BenchmarksDto": {
        "type": "object",
        "properties": {
          "industryAverage": {
            "$ref": "#/components/schemas/BenchmarkMetricsDto"
          },
          "companyPerformance": {
            "$ref": "#/components/schemas/BenchmarkMetricsDto"
          }
        },
        "required": [
          "industryAverage",
          "companyPerformance"
        ]
      },
      "PerformanceAlertDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "performance",
              "operational",
              "financial"
            ]
          },
          "severity": {
            "type": "string",
            "enum": [
              "critical",
              "warning",
              "info"
            ]
          },
          "message": {
            "type": "string"
          },
          "actionRequired": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "severity",
          "message",
          "actionRequired"
        ]
      },
      "PerformanceAnalyticsDto": {
        "type": "object",
        "properties": {
          "salesPerformance": {
            "$ref": "#/components/schemas/SalesPerformanceDto"
          },
          "operationalMetrics": {
            "$ref": "#/components/schemas/OperationalMetricsDto"
          },
          "trends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TrendDto"
            }
          },
          "benchmarks": {
            "$ref": "#/components/schemas/BenchmarksDto"
          },
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PerformanceAlertDto"
            }
          }
        },
        "required": [
          "salesPerformance",
          "operationalMetrics",
          "trends",
          "benchmarks",
          "alerts"
        ]
      },
      "CreateReturnItemDto": {
        "type": "object",
        "properties": {
          "saleItemId": {
            "type": "string",
            "example": "sale_item_123"
          },
          "quantity": {
            "type": "number",
            "example": 2
          },
          "reason": {
            "type": "string",
            "example": "DAMAGED",
            "enum": [
              "DAMAGED",
              "CUSTOMER_REQUEST",
              "WRONG_ITEM",
              "OTHER"
            ]
          },
          "restockable": {
            "type": "boolean",
            "example": true
          },
          "notes": {
            "type": "string",
            "example": "Item arrived damaged during shipping"
          }
        },
        "required": [
          "saleItemId",
          "quantity",
          "reason"
        ]
      },
      "CreateReturnDto": {
        "type": "object",
        "properties": {
          "saleId": {
            "type": "string",
            "example": "sale_123"
          },
          "refundAmount": {
            "type": "number",
            "example": 150.5
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateReturnItemDto"
            }
          },
          "notes": {
            "type": "string",
            "example": "Customer was not satisfied with the product quality"
          },
          "autoCalculateRefund": {
            "type": "boolean",
            "example": false
          },
          "restockItems": {
            "type": "boolean",
            "example": false
          }
        },
        "required": [
          "saleId",
          "items"
        ]
      },
      "UpdateReturnDto": {
        "type": "object",
        "properties": {
          "saleId": {
            "type": "string",
            "example": "sale_123"
          },
          "refundAmount": {
            "type": "number",
            "example": 150.5
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateReturnItemDto"
            }
          },
          "notes": {
            "type": "string",
            "example": "Customer was not satisfied with the product quality"
          },
          "autoCalculateRefund": {
            "type": "boolean",
            "example": false
          },
          "restockItems": {
            "type": "boolean",
            "example": false
          }
        }
      }
    }
  }
}